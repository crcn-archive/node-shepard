// Generated by CoffeeScript 1.6.2
(function() {
  var async, getArrayTypeCaster, getClassTypeCaster, getSimpleDataTypeCaster, getTypeCaster, type;

  type = require("type-component");

  async = require("async");

  /*
  */


  getArrayTypeCaster = function() {
    return function(value) {
      if (type(value) === "array") {
        return value;
      }
      return [value];
    };
  };

  /*
  */


  getSimpleDataTypeCaster = function(typeClass) {
    return function(value) {
      return typeClass(value);
    };
  };

  /*
  */


  getClassTypeCaster = function(typeClass) {
    return function(value) {
      if (value && value.constructor === typeClass) {
        return value;
      }
      return new typeClass(value);
    };
  };

  /*
  */


  getTypeCaster = function(typeClass) {
    if (typeClass === Array) {
      return getArrayTypeCaster();
    }
    if ((typeClass === String) || (typeClass === Number)) {
      return getSimpleDataTypeCaster(typeClass);
    }
    return getClassTypeCaster(typeClass);
  };

  /*
  */


  module.exports = function(options) {
    var caster, mapper, self, _mid, _post, _pre, _transform;

    if (options == null) {
      options = {};
    }
    _transform = [];
    _pre = [];
    _post = [];
    _mid = [];
    /*
    */

    self = function(value, next) {
      if (arguments.length > 1 && type(arguments[arguments.length - 1]) === "function") {
        return self.async(value, next);
      } else {
        return self.sync.apply(null, arguments);
      }
    };
    /*
    */

    self.async = function(value, next) {
      return async.eachSeries(_transform, (function(transformer, next) {
        if (transformer.async) {
          return transformer.transform(value, function(err, result) {
            if (err) {
              return next(err);
            }
            return next(null, value = result);
          });
        } else {
          value = transformer.transform(value);
          return next();
        }
      }), function(err, result) {
        if (err) {
          return next(err);
        }
        return next(null, value);
      });
    };
    /*
    */

    self.sync = function() {
      var transformer, _i, _len;

      for (_i = 0, _len = _transform.length; _i < _len; _i++) {
        transformer = _transform[_i];
        arguments[0] = transformer.transform.apply(null, arguments);
      }
      return arguments[0];
    };
    /*
    */

    self.preCast = function(typeClass) {
      return self._push(caster(typeClass), _pre);
    };
    /*
    */

    self.cast = function(typeClass) {
      return self._push(caster(typeClass), _mid);
    };
    /*
    */

    self.postCast = function(typeClass) {
      return self._push(caster(typeClass), _post);
    };
    /*
    */

    caster = function(typeClass) {
      return {
        transform: getTypeCaster(typeClass)
      };
    };
    /*
    */

    self.preMap = function(fn) {
      return self._push(mapper(fn), _pre);
    };
    /*
    */

    self.map = function(fn) {
      return self._push(mapper(fn), _mid);
    };
    /*
    */

    self.postMap = function(fn) {
      return self._push(mapper(fn), _post);
    };
    /*
    */

    mapper = function(fn) {
      return {
        async: fn.length > 1,
        transform: fn
      };
    };
    /*
    */

    self._push = function(obj, stack) {
      stack.push(obj);
      _transform = _pre.concat(_mid).concat(_post);
      return this;
    };
    return self;
  };

}).call(this);
