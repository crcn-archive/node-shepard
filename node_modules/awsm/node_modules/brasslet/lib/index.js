// Generated by CoffeeScript 1.6.2
var CallChain, Fasten, events, flatstack, type, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

CallChain = require("./callChain");

flatstack = require("flatstack");

type = require("type-component");

events = require("events");

_ = require("underscore");

Fasten = (function(_super) {
  __extends(Fasten, _super);

  /*
  */


  function Fasten() {
    this._callChainOptions = {};
  }

  /*
  */


  Fasten.prototype.add = function(name, options) {
    this._callChainOptions[name] = this._fixOps(options);
    return this;
  };

  /*
  */


  Fasten.prototype.options = function() {
    return this._callChainOptions;
  };

  /*
  */


  Fasten.prototype.all = function(options) {
    var key, _results;

    _results = [];
    for (key in this._callChainOptions) {
      _results.push(_.extend(this._callChainOptions[key], options));
    }
    return _results;
  };

  /*
  */


  Fasten.prototype.wrap = function(type, target, callstack) {
    return new CallChain({
      fasten: this,
      type: type,
      target: target,
      methods: this._callChainOptions[type],
      callstack: callstack != null ? callstack : flatstack()
    });
  };

  /*
  */


  Fasten.prototype._fixOps = function(ops) {
    if (type(ops) === "array") {
      return this._arrayToOps(ops);
    }
    return ops;
  };

  /*
  */


  Fasten.prototype._arrayToOps = function(ops) {
    var newOps, opName, _i, _len;

    newOps = {};
    for (_i = 0, _len = ops.length; _i < _len; _i++) {
      opName = ops[_i];
      newOps[opName] = function() {
        return this;
      };
    }
    return newOps;
  };

  return Fasten;

})(events.EventEmitter);

module.exports = function() {
  return new Fasten();
};
