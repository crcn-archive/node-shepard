// Generated by CoffeeScript 1.6.2
(function() {
  var Base, type,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Base = require("./base");

  type = require("type-component");

  module.exports = (function(_super) {
    __extends(_Class, _super);

    /*
    */


    function _Class(binding, to, property) {
      this.binding = binding;
      this.to = to;
      this.property = property;
      _Class.__super__.constructor.call(this, this.binding);
    }

    /*
    */


    _Class.prototype._change = function(newValue) {
      this._ignoreBothWays = true;
      this.to.set(this.property, newValue);
      return this._ignoreBothWays = false;
    };

    /*
    */


    _Class.prototype.dispose = function() {
      var _ref;

      if ((_ref = this._bothWaysBinding) != null) {
        _ref.dispose();
      }
      return this._bothWaysBinding = this.binding = this.to = this.properties = null;
    };

    /*
    */


    _Class.prototype.bothWays = function() {
      var _this = this;

      return this._bothWaysBinding = this.to.bind(this.property).map({
        to: function() {
          var value, _ref;

          value = (_ref = _this.binding._map).from.apply(_ref, arguments);
          if (type(value) === "array") {
            return value;
          } else {
            return [value];
          }
        }
      }).to(function(values) {
        var i, prop, value, _i, _len;

        if (_this._ignoreBothWays) {
          return;
        }
        for (i = _i = 0, _len = values.length; _i < _len; i = ++_i) {
          value = values[i];
          prop = _this.binding._properties[i];
          _this.binding._from.set(prop, value);
        }
      });
    };

    return _Class;

  })(Base);

}).call(this);
