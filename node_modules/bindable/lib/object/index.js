// Generated by CoffeeScript 1.6.2
(function() {
  var Bindable, Binding, EventEmitter, dref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  dref = require("./dref");

  EventEmitter = require("../core/eventEmitter");

  Binding = require("./binding");

  module.exports = Bindable = (function(_super) {
    __extends(Bindable, _super);

    /*
    */


    Bindable.prototype.__isBindable = true;

    /*
    */


    function Bindable(data) {
      Bindable.__super__.constructor.call(this);
      this._initData(data);
      this._bindings = [];
    }

    /*
    */


    Bindable.prototype._initData = function(data) {
      this.data = data != null ? data : {};
    };

    /*
    */


    Bindable.prototype._watching = function(property) {};

    /*
    */


    Bindable.prototype.get = function(key, flatten) {
      var firstProp, keyParts, ret;

      if (flatten == null) {
        flatten = false;
      }
      ret = dref.get(this.data, key, flatten);
      if (ret != null) {
        return ret;
      }
      keyParts = key.split(".");
      firstProp = keyParts.shift();
      ret = dref.get(this[firstProp], keyParts.join("."), flatten);
      if (ret != null) {
        dref.set(this, firstProp, ret);
      }
      return ret;
    };

    /*
    */


    Bindable.prototype.toObject = function(key) {
      return this.get(key, true);
    };

    /*
     DEPRECATED
    */


    Bindable.prototype.getFlatten = function(key) {
      return this.toObject(key);
    };

    /*
    */


    Bindable.prototype.keys = function() {
      return Object.keys(this.getFlatten());
    };

    /*
    */


    Bindable.prototype.has = function(key) {
      return !!this.get(key);
    };

    /*
    */


    Bindable.prototype.set = function(key, value) {
      var k, _i, _len, _ref;

      if (arguments.length === 1) {
        if (key.__isBindable) {
          _ref = key.keys();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            k = _ref[_i];
            this.set(k, key.get(k));
          }
          return;
        }
        for (k in key) {
          this.set(k, key[k]);
        }
        return;
      }
      return this._set(key, value);
    };

    /*
    */


    Bindable.prototype.reset = function(newData) {
      var key;

      if (newData == null) {
        newData = {};
      }
      this.set(newData);
      for (key in this.data) {
        if (dref.get(newData, key) == null) {
          this.set(key, void 0);
        }
      }
      return this;
    };

    /*
    */


    Bindable.prototype._set = function(key, value) {
      if (!dref.set(this, key, value)) {
        return this;
      }
      this.emit("change:" + key, value);
      this.emit("change", key, value);
      return this;
    };

    /*
    */


    Bindable.prototype._ref = function(context, key) {
      if (!key) {
        return context;
      }
      dref.get(context, key);
      return this;
    };

    /*
    */


    Bindable.prototype.bind = function(property, to) {
      if (typeof property === "object") {
        return Binding.fromOptions(this, property);
      }
      if (to && to.__isBinding) {
        this.set(property, to);
        return;
      }
      return new Binding(this, property).to(to);
    };

    /*
    */


    Bindable.prototype.dispose = function() {
      return this.emit("dispose");
    };

    /*
    */


    Bindable.prototype.toJSON = function() {
      return this.data;
    };

    return Bindable;

  })(EventEmitter);

  module.exports.EventEmitter = EventEmitter;

  module.exports.propertyWatcher = require("./deepPropertyWatcher");

}).call(this);
