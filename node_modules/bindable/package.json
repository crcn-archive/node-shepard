{
  "name": "bindable",
  "version": "0.3.39",
  "description": "bindable.js ===========",
  "main": "./lib/index.js",
  "scripts": {
    "test": "make clean all test-web; mocha --timeout 100 --reporter min; karma start"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/classdojo/bindable.js.git"
  },
  "author": "",
  "license": "BSD",
  "readmeFilename": "README.md",
  "gitHead": "7edb2889d669a6f42b537b50772f9e86cf6337f1",
  "dependencies": {
    "dref": "0.1.x",
    "disposable": "0.0.x",
    "underscore": "1.4.x",
    "hoist": "0.0.x",
    "toarray": "0.0.1",
    "outcome": "0.0.x",
    "type-component": "0.0.x",
    "async": "0.2.x"
  },
  "devDependencies": {
    "mocha": "1.8.x",
    "expect.js": "0.2.x",
    "structr": "0.2.x",
    "sift": "0.0.9",
    "sardines": "0.4.x",
    "karma": "0.8.x",
    "benchmark": "~1.0.0"
  },
  "readme": "## Bindable\n\nIncredibly flexible bi-directional data binding library for `objects`, and `collections`. \n\n## Projects using bindable.js\n\n- [paperclip.js](/classdojo/paperclip.js) - data-bindable templating engine.\n- [linen.js](/classdojo/linen.js) - API library\n- [sherpa.js](/classdojo/sherpa.js) - online tours library\n\n### Objects Example\n\n```javascript\nvar BindableObject = require(\"bindable\").Object;\n\nvar item = new BindableObject({\n  name: \"craig\",\n  last: \"condon\",\n  location: {\n    city: \"San Francisco\"\n  }\n});\n\nitem.bind(\"location.zip\", function(value) {\n  \n}).now();\n\n//triggers the binding\nitem.set(\"location.zip\", \"94102\"); \n\n\n\n//bind location.zip to another property in the model, and do it only once\nitem.bind(\"location.zip\", \"zip\").once().now();\n\n//bind location.zip to another object, and make it go both ways!\nitem.bind(\"location.zip\").to(anotherModel, \"location.zip\").bothWays().now();\n\n//chain to multiple items, and limit it!\nitem.bind(\"location.zip\").to(\"property\").to(\"anotherProperty\").to(function(value) {\n  \n}).limit(5).now();\n\nitem.bind({\n  property: \"location.zip\",\n  limit: 5,\n  to: \"anotherProperty\",\n  now: true\n})\n\n//you can even bind to values by setting a binding\nanotherModel.set(\"location.zip\", item.bind(\"location.zip\"));\n\n//you can also transform data as it's being bound\nitem.bind(\"name\").map(function(name) {\n  return name.toUpperCase()\n}).to(\"name2\").now();\n\n```\n\n### Collections Example\n\n```javascript\nvar collection = new bindable.Collection([{ name: \"craig\" }, { name: \"sam\" }, { name: \"liam\" }]),\ncollection2 = new bindable.Collection();\n\n//binding to another collection, and transform that value into something else\ncollection.bind().map(function(item) {\n  return new BindableObject(item);\n}).to(collection2);\n\n//binding to a collection with a filter\ncollection.bind().filter({ name: {$nin: [\"craig\", \"liam\"] }}).to(collection2).now();\n\n\nvar source = [];\n\ncollection.bind(function(method, item, index) {\n  switch(method) {\n    case \"insert\": \n      source.splice(index, 0, item);\n    break;\n    case \"update\":\n    case \"replace\":\n      source.splice(index, 1, item);\n    break;\n    case \"remove\":\n      source.splice(index, 1);\n    break;\n  }\n});\n```\n\n### Iteration helper\n\n```javascript\nvar jake = new bindable.Object({\n  name: \"jake\",\n  age: 12\n});\n\nvar sam = new bindable.Object({\n  name: \"sam\",\n  age: 22\n});\n\nvar craig = new bindable.Object({\n  name: \"craig\",\n  age: 23\n});\n\nvar liam = new bindable.Object({\n  name: \"liam\",\n  friends: [jake, sam, craig],\n  getFriendsOlderThan20: bindable.computed(\"friends.@forEach.age\", function(next) {\n    this.get(\"friends\").filter(function(friend) {\n      return friend.get(\"age\") > 20;\n    }).forEach(next);\n  })\n});\n\n\nliam.bind(\"@getFriendsOlderThan20.name\").to(function(friendsOlderThan20) {\n  //[sam, craig]\n}).now();\n\njake.set(\"age\", 22);\n\n//callback friendsOlderThan20 = [sam, craig, jake]\n```\n\n\n### Computed Properties\n\n\n```javascript\nvar notification = new bindable.Object({\n  message: \"hello\",\n  read: false\n}),\nnotification2 = new bindable.Object({\n  message: \"hello 2\",\n  read: true\n});\n\nvar notifications = new bindable.Collection([notification, notification2]);\n\n//bind the number of unread notifications to numUnreadNotifications\nnotifications.bind(\"@each.read\").map(function(readNotifications) {\n  return readNotifications.filter(function(isRead) {\n    return !isRead;\n  }).length;\n}).to(\"numUnreadNotifications\").now();\n\nconsole.log(notifications.get(\"numUnreadNotifications\")); //1\n\nfor(var i = notifications.length(); i--;) {\n  notifications.at(i).set(\"read\", true);\n}\nconsole.log(notifications.get(\"numUnreadNotifications\")); //0\n\n```\n\n#### Add some sugar...\n\nYou can also compute properties by watching multiple values. For instance:\n\n```javascript\n\nvar person = new bindable.Object({\n  firstName: \"John\",\n  lastName: \"Doe\"\n});\n\nperson.bind(\"firstName, lastName\").map({\n  to: function(firstName, lastName) {\n    return [firstName, lastName].join(\" \");\n  },\n  from: function(fullName) {\n    return String(fullName).split(\" \");\n  }\n}).to(\"fullName\").bothWays().now();\n\nconsole.log(person.get(\"fullName\")); //John Doe\nperson.set(\"fullName\", \"Jake Anderson\"); \nconsole.log(person.get(\"firstName\"), person.get(\"lastName\")); //Jake Anderson\n```\n\n\n### API\n",
  "bugs": {
    "url": "https://github.com/classdojo/bindable.js/issues"
  },
  "_id": "bindable@0.3.39",
  "_from": "bindable@~0.3.39"
}
