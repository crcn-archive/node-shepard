{
  "name": "gumbo",
  "description": "node.js db",
  "version": "0.5.9",
  "author": {
    "name": "Craig Condon"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/crcn/gumbo.js.git"
  },
  "directories": {
    "lib": "./lib"
  },
  "dependencies": {
    "dref": "0.0.x",
    "sift": "0.0.x",
    "structr": "0.2.x",
    "underscore": "1.4.x",
    "fiddle": "0.0.x",
    "structr-step": "0.0.x",
    "outcome": "0.0.x",
    "disposable": "0.0.x",
    "expect.js": "0.2.x",
    "toarray": "0.0.x",
    "tq": "0.2.x",
    "cstep": "0.0.x",
    "step": "0.0.x"
  },
  "devDependencies": {
    "chai": "1.5.x",
    "mocha": "1.8.x"
  },
  "scripts": {
    "test": "mocha --reporter min"
  },
  "main": "./lib/index.js",
  "readme": "## mongodb-like collections [![Build Status](https://secure.travis-ci.org/crcn/gumbo.js.png)](https://secure.travis-ci.org/crcn/gumbo.js)\n\n```javascript\nvar gumbo = require(\"gumbo\");\n\n\nvar col = gumbo.collection([\n\t{\n\t\tname: \"craig\",\n\t\tage: 99\n\t},\n\t{\n\t\tname: \"tim\",\n\t\tage: 104\n\t}\n}\n]);\n\ncol.find({ age: { $gt: 100 } }).limit(10).skip(1).sort({ age: -1 }).exec(function(err, people) {\n\t\n});\n\n\n//watching \ncol.watch({ age: {$gt: 100 } }, {\n\tinsert: function(item) {\n\t\tconsole.log(\"insert %s\", item.get(\"_id\"));\n\t},\n\tupdate: function(item) {\n\n\t},\n\tremove: function(item) {\n\n\t}\n});\n\n\n```\n\n## API\n\n### gumbo.collection(source, modelClass)\n\ncreates a new collection\n\n`source` - the source for the collection.\n`modelClass` - the model class for the source.\n\n## Collection API\n\n### Iterator collection.insert(items)\n\n### Iterator collection.update(search, set)\n\n### Query collection.find(search)\n\n### Query collection.findOne(search)\n\n### Query collection.watch(search, observers)\n\nwatches the collection for any particular changes\n\n### Synchronizer collection.syncTo(targetCollection)\n\nsynchronizes the data from one collection to another collection\n\n## Iterator API\n\nbasic example:\n\n```javascript\n\n//update, and return the modified items\ncollection.update({ name: \"craig\" }, { $set: { age: 55 }}).capture().exec(function(err, modifiedItems) {\n\t\n});\n\n\n```\n\n### iterator.chunkSize(count)\n\ndefines the chunk size when executing asynchronous tasks \n\n### iterator.capture()\n\ncaptures any found / modified items  \n\n### iterator.exec(cb)\n\nexecutes the iterator asynchronously\n\n### Array iterator.sync()\n\nexetures the iterator synchronously, and returns the result\n\n\n\n\n",
  "readmeFilename": "README.md",
  "_id": "gumbo@0.5.9",
  "dist": {
    "shasum": "3252b609190e820e79251da30674f6afcf8cbd8a"
  },
  "_from": "gumbo@",
  "_resolved": "http://registry.npmjs.org/gumbo/-/gumbo-0.5.9.tgz"
}
