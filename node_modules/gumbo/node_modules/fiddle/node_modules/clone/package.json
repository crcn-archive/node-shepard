{
  "name": "clone",
  "description": "deep cloning of objects and arrays",
  "tags": [
    "clone",
    "object",
    "array",
    "function",
    "date"
  ],
  "version": "0.0.7",
  "repository": {
    "type": "git",
    "url": "git://github.com/pvorb/node-clone.git"
  },
  "bugs": {
    "url": "https://github.com/pvorb/node-clone/issues"
  },
  "main": "clone.js",
  "author": {
    "name": "Paul Vorbach",
    "email": "paul@vorb.de",
    "url": "http://vorb.de"
  },
  "contributors": [
    {
      "name": "Blake Miner",
      "email": "miner.blake@gmail.com",
      "url": "http://www.blakeminer.com/"
    },
    {
      "name": "Tian You",
      "email": "axqd001@gmail.com",
      "url": "http://blog.axqd.net/"
    },
    {
      "name": "George Stagas",
      "email": "gstagas@gmail.com",
      "url": "http://stagas.com/"
    },
    {
      "name": "Tobiasz Cudnik",
      "email": "tobiasz.cudnik@gmail.com",
      "url": "https://github.com/TobiaszCudnik"
    },
    {
      "name": "Pavel Lang",
      "email": "langpavel@phpskelet.org",
      "url": "https://github.com/langpavel"
    }
  ],
  "engines": {
    "node": "*"
  },
  "dependencies": {},
  "devDependencies": {
    "underscore": "*",
    "nodeunit": "*"
  },
  "optionalDependencies": {},
  "scripts": {
    "test": "./node_modules/nodeunit/bin/nodeunit ./test.js"
  },
  "readme": "# clone\n\noffers foolproof _deep_ cloning of variables in JavaScript.\n\n## Installation\n\n```\nnpm install clone\n```\n\n## Example\n\n```js\nvar clone = require('clone');\n\nvar a, b;\na = { foo: { bar: 'baz' } };\nb = clone(a);\na.foo.bar = 'foo';\n\nconsole.log(b);\n```\n\nThis will print:\n\n```js\n{ foo: { bar: 'baz' } }\n```\n\n**clone** masters cloning simple objects (even with custom prototype), arrays,\nDate objects, and RegEx objects. Everything is cloned recursively, so that you\ncan clone dates in arrays in objects, for example.\n\n## API\n\n`clone(obj, circular)`\n\nCall `clone` with `circular` set to `false` if you are certain that `obj`\ncontains no circular references. This will give better performance if needed.\nThere is no error if `undefined` or `null` is passed as `obj`.\n\n## Circular References\n\n```js\nvar a, b;\na = { hello: 'world' };\na.myself = a;\nb = clone(a);\n\nconsole.log(b);\n```\n\nThis will print:\n\n```\n{ hello: \"world\", myself: [Circular] }\n```\n\nSo, `b.myself` points to `b`, not `a`. Neat!\n\n## Bugs and Issues\n\nIf you encounter any bugs or issues, feel free to open an issue at\n[github](https://github.com/pvorb/node-clone/issues).\n\n## License\n\nCopyright © 2011-2012 Paul Vorbach\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the “Software”), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.mkd",
  "_id": "clone@0.0.7",
  "dist": {
    "shasum": "78279264b93edf81842d0871beccbcc7a48c7d04"
  },
  "_from": "clone@0.0.x",
  "_resolved": "http://registry.npmjs.org/clone/-/clone-0.0.7.tgz"
}
